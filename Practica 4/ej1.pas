{1. Considere que desea almacenar en un archivo la informaci√≥n correspondiente a los
alumnos de la Facultad de Inform√°tica de la UNLP. 

De los mismos deber√° guardarse
nombre y apellido, DNI, legajo y a√±o de ingreso. Suponga que dicho archivo se organiza
como un √°rbol B de orden M. x

a. Defina en Pascal las estructuras de datos necesarias para organizar el archivo de
alumnos como un √°rbol B de orden M. x

b. Suponga que la estructura de datos que representa una persona (registro de
persona) ocupa 64 bytes, que cada nodo del √°rbol B tiene un tama√±o de 512
bytes y que los n√∫meros enteros ocupan 4 bytes, ¬øcu√°ntos registros de persona
entrar√≠an en un nodo del √°rbol B? --> entran OCHO 
¬øCu√°l ser√≠a el orden del √°rbol B en este caso (el
valor de M)? --> 9  X

Para resolver este inciso, puede utilizar la f√≥rmula N = (M-1) * A + M *
B + C, donde N es el tama√±o del nodo (en bytes), A es el tama√±o de un registro
(en bytes), B es el tama√±o de cada enlace a un hijo y C es el tama√±o que ocupa
el campo referido a la cantidad de claves. El objetivo es reemplazar estas
variables con los valores dados y obtener el valor de M (M debe ser un n√∫mero
entero, ignorar la parte decimal). X

c. ¬øQu√© impacto tiene sobre el valor de M organizar el archivo con toda la
informaci√≥n de los alumnos como un √°rbol B?
El valor de M depende del tama√±o del registro de datos. 
Si los registros de los alumnos contienen m√°s informaci√≥n y, por lo tanto, ocupan m√°s espacio, 
el valor de M disminuir√° porque menos registros caben en un nodo de tama√±o fijo. 
Si los registros contienen menos informaci√≥n, M aumentar√°. x

d. ¬øQu√© dato seleccionar√≠a como clave de identificaci√≥n para organizar los
elementos (alumnos) en el √°rbol B? ¬øHay m√°s de una opci√≥n? LEGAJO (otra opcion dni) x

e. Describa el proceso de b√∫squeda de un alumno por el criterio de ordenamiento
especificado en el punto previo. ¬øCu√°ntas lecturas de nodos se necesitan para
encontrar un alumno por su clave de identificaci√≥n en el peor y en el mejor de
los casos? ¬øCu√°les ser√≠an estos casos?
Para buscar un alumno en un √°rbol B por la clave de identificaci√≥n (Legajo o DNI), 
el proceso es similar al de cualquier b√∫squeda en un √°rbol B:

Comenzar desde la ra√≠z.
Comparar la clave de b√∫squeda con las claves en el nodo actual.
Si la clave coincide, devolver el registro.
Si la clave es menor, ir al hijo izquierdo; si es mayor, ir al hijo derecho.
Repetir hasta encontrar la clave o llegar a un nodo hoja sin encontrar la clave.
En el mejor caso, la clave se encuentra en la ra√≠z, por lo que solo se necesita una lectura de nodo.

En el peor caso, la clave est√° en el nivel m√°s profundo del √°rbol. En un √°rbol B de orden M, 
el n√∫mero m√°ximo de nodos le√≠dos es proporcional a la altura del √°rbol, que es 
ùëÇ(log‚Å°ùëÄùëÅ) donde N es el n√∫mero total de registros. X

f. ¬øQu√© ocurre si desea buscar un alumno por un criterio diferente? ¬øCu√°ntas
lecturas ser√≠an necesarias en el peor de los casos?
Si se desea buscar por un criterio diferente, como el NombreApellido, el √°rbol B no es eficiente, 
ya que no est√° ordenado por este criterio. En el peor de los casos, habr√≠a que realizar una b√∫squeda exhaustiva 
a trav√©s de todos los nodos, lo que implica leer todos los nodos del √°rbol. En el peor caso, esto significa realizar 
ùëÅ lecturas, donde ùëÅ es el n√∫mero total de nodos del √°rbol. X}

program ej1;
const
  M = 8;
type
	alumno = record
		nomyape: cadena;
		dni: integer;
		legajo: string[8];
		ano_ingreso: integer;
	end;
	nodo = record
		cant_datos: integer;
		datos: array[1..M-1] of alumno;
		hijos: array[1..M] of integer;
	end;
	arbolB = file of nodo;
var
  archivo: arbolB;
begin
end.